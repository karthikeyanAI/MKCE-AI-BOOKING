"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRedirectFromPostIdPlugin = exports.redirectFromPostIdMiddlewareOptions = exports.redirectFromPostIdMiddleware = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const constants_1 = require("./constants");
const process_arnables_plugin_1 = require("./process-arnables-plugin");
const redirectFromPostIdMiddleware = (config) => (next, context) => async (args) => {
    const { input, request } = args;
    if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
    if (input.OutpostId) {
        const { isCustomEndpoint } = config;
        const useFipsEndpoint = await config.useFipsEndpoint();
        request.hostname = (0, process_arnables_plugin_1.getOutpostEndpoint)(request.hostname, { isCustomEndpoint, useFipsEndpoint });
        context[constants_1.CONTEXT_SIGNING_SERVICE] = "s3-outposts";
    }
    return next(args);
};
exports.redirectFromPostIdMiddleware = redirectFromPostIdMiddleware;
exports.redirectFromPostIdMiddlewareOptions = {
    step: "build",
    name: "redirectFromPostIdMiddleware",
    tags: ["OUTPOST"],
    override: true,
};
const getRedirectFromPostIdPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add((0, exports.redirectFromPostIdMiddleware)(options), exports.redirectFromPostIdMiddlewareOptions);
    },
});
exports.getRedirectFromPostIdPlugin = getRedirectFromPostIdPlugin;
