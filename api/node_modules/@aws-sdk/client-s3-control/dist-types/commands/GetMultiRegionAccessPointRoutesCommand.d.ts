import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { GetMultiRegionAccessPointRoutesRequest, GetMultiRegionAccessPointRoutesResult } from "../models/models_0";
import { S3ControlClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../S3ControlClient";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetMultiRegionAccessPointRoutesCommand}.
 */
export interface GetMultiRegionAccessPointRoutesCommandInput extends GetMultiRegionAccessPointRoutesRequest {
}
/**
 * @public
 *
 * The output of {@link GetMultiRegionAccessPointRoutesCommand}.
 */
export interface GetMultiRegionAccessPointRoutesCommandOutput extends GetMultiRegionAccessPointRoutesResult, __MetadataBearer {
}
/**
 * @public
 * <note>
 *             <p>This operation is not supported by directory buckets.</p>
 *          </note>
 *          <p>Returns the routing configuration for a Multi-Region Access Point, indicating which Regions are active or
 *          passive.</p>
 *          <p>To obtain routing control changes and failover requests, use the Amazon S3 failover control
 *          infrastructure endpoints in these five Amazon Web Services Regions:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <code>us-east-1</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>us-west-2</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>ap-southeast-2</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>ap-northeast-1</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>eu-west-1</code>
 *                </p>
 *             </li>
 *          </ul>
 *          <note>
 *             <p>Your Amazon S3 bucket does not need to be in these five Regions.</p>
 *          </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { S3ControlClient, GetMultiRegionAccessPointRoutesCommand } from "@aws-sdk/client-s3-control"; // ES Modules import
 * // const { S3ControlClient, GetMultiRegionAccessPointRoutesCommand } = require("@aws-sdk/client-s3-control"); // CommonJS import
 * const client = new S3ControlClient(config);
 * const input = { // GetMultiRegionAccessPointRoutesRequest
 *   AccountId: "STRING_VALUE",
 *   Mrap: "STRING_VALUE", // required
 * };
 * const command = new GetMultiRegionAccessPointRoutesCommand(input);
 * const response = await client.send(command);
 * // { // GetMultiRegionAccessPointRoutesResult
 * //   Mrap: "STRING_VALUE",
 * //   Routes: [ // RouteList
 * //     { // MultiRegionAccessPointRoute
 * //       Bucket: "STRING_VALUE",
 * //       Region: "STRING_VALUE",
 * //       TrafficDialPercentage: Number("int"), // required
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param GetMultiRegionAccessPointRoutesCommandInput - {@link GetMultiRegionAccessPointRoutesCommandInput}
 * @returns {@link GetMultiRegionAccessPointRoutesCommandOutput}
 * @see {@link GetMultiRegionAccessPointRoutesCommandInput} for command's `input` shape.
 * @see {@link GetMultiRegionAccessPointRoutesCommandOutput} for command's `response` shape.
 * @see {@link S3ControlClientResolvedConfig | config} for S3ControlClient's `config` shape.
 *
 * @throws {@link S3ControlServiceException}
 * <p>Base exception class for all service exceptions from S3Control service.</p>
 *
 */
export declare class GetMultiRegionAccessPointRoutesCommand extends $Command<GetMultiRegionAccessPointRoutesCommandInput, GetMultiRegionAccessPointRoutesCommandOutput, S3ControlClientResolvedConfig> {
    readonly input: GetMultiRegionAccessPointRoutesCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: GetMultiRegionAccessPointRoutesCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: S3ControlClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMultiRegionAccessPointRoutesCommandInput, GetMultiRegionAccessPointRoutesCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
