import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { ListStorageLensGroupsRequest } from "../models/models_0";
import { ListStorageLensGroupsResult } from "../models/models_1";
import { S3ControlClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../S3ControlClient";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListStorageLensGroupsCommand}.
 */
export interface ListStorageLensGroupsCommandInput extends ListStorageLensGroupsRequest {
}
/**
 * @public
 *
 * The output of {@link ListStorageLensGroupsCommand}.
 */
export interface ListStorageLensGroupsCommandOutput extends ListStorageLensGroupsResult, __MetadataBearer {
}
/**
 * @public
 * <p>
 * Lists all the Storage Lens groups in the specified home Region.
 * </p>
 *          <p>To use this operation, you must have the permission to perform the
 *       <code>s3:ListStorageLensGroups</code> action. For more information about the required Storage Lens
 *       Groups permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage_lens_iam_permissions.html#storage_lens_groups_permissions">Setting account permissions to use S3 Storage Lens groups</a>.</p>
 *          <p>For information about Storage Lens groups errors, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#S3LensErrorCodeList">List of Amazon S3 Storage
 *       Lens error codes</a>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { S3ControlClient, ListStorageLensGroupsCommand } from "@aws-sdk/client-s3-control"; // ES Modules import
 * // const { S3ControlClient, ListStorageLensGroupsCommand } = require("@aws-sdk/client-s3-control"); // CommonJS import
 * const client = new S3ControlClient(config);
 * const input = { // ListStorageLensGroupsRequest
 *   AccountId: "STRING_VALUE",
 *   NextToken: "STRING_VALUE",
 * };
 * const command = new ListStorageLensGroupsCommand(input);
 * const response = await client.send(command);
 * // { // ListStorageLensGroupsResult
 * //   NextToken: "STRING_VALUE",
 * //   StorageLensGroupList: [ // StorageLensGroupList
 * //     { // ListStorageLensGroupEntry
 * //       Name: "STRING_VALUE", // required
 * //       StorageLensGroupArn: "STRING_VALUE", // required
 * //       HomeRegion: "STRING_VALUE", // required
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param ListStorageLensGroupsCommandInput - {@link ListStorageLensGroupsCommandInput}
 * @returns {@link ListStorageLensGroupsCommandOutput}
 * @see {@link ListStorageLensGroupsCommandInput} for command's `input` shape.
 * @see {@link ListStorageLensGroupsCommandOutput} for command's `response` shape.
 * @see {@link S3ControlClientResolvedConfig | config} for S3ControlClient's `config` shape.
 *
 * @throws {@link S3ControlServiceException}
 * <p>Base exception class for all service exceptions from S3Control service.</p>
 *
 */
export declare class ListStorageLensGroupsCommand extends $Command<ListStorageLensGroupsCommandInput, ListStorageLensGroupsCommandOutput, S3ControlClientResolvedConfig> {
    readonly input: ListStorageLensGroupsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: ListStorageLensGroupsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: S3ControlClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStorageLensGroupsCommandInput, ListStorageLensGroupsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
