import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { GetStorageLensGroupRequest, GetStorageLensGroupResult } from "../models/models_0";
import { S3ControlClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../S3ControlClient";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetStorageLensGroupCommand}.
 */
export interface GetStorageLensGroupCommandInput extends GetStorageLensGroupRequest {
}
/**
 * @public
 *
 * The output of {@link GetStorageLensGroupCommand}.
 */
export interface GetStorageLensGroupCommandOutput extends GetStorageLensGroupResult, __MetadataBearer {
}
/**
 * @public
 * <p>
 * Retrieves the Storage Lens group configuration details.</p>
 *          <p>To use this operation, you must have the permission to perform the
 *       <code>s3:GetStorageLensGroup</code> action. For more information about the required Storage Lens
 *       Groups permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage_lens_iam_permissions.html#storage_lens_groups_permissions">Setting account permissions to use S3 Storage Lens groups</a>.</p>
 *          <p>For information about Storage Lens groups errors, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#S3LensErrorCodeList">List of Amazon S3 Storage
 *       Lens error codes</a>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { S3ControlClient, GetStorageLensGroupCommand } from "@aws-sdk/client-s3-control"; // ES Modules import
 * // const { S3ControlClient, GetStorageLensGroupCommand } = require("@aws-sdk/client-s3-control"); // CommonJS import
 * const client = new S3ControlClient(config);
 * const input = { // GetStorageLensGroupRequest
 *   Name: "STRING_VALUE", // required
 *   AccountId: "STRING_VALUE",
 * };
 * const command = new GetStorageLensGroupCommand(input);
 * const response = await client.send(command);
 * // { // GetStorageLensGroupResult
 * //   StorageLensGroup: { // StorageLensGroup
 * //     Name: "STRING_VALUE", // required
 * //     Filter: { // StorageLensGroupFilter
 * //       MatchAnyPrefix: [ // MatchAnyPrefix
 * //         "STRING_VALUE",
 * //       ],
 * //       MatchAnySuffix: [ // MatchAnySuffix
 * //         "STRING_VALUE",
 * //       ],
 * //       MatchAnyTag: [ // MatchAnyTag
 * //         { // S3Tag
 * //           Key: "STRING_VALUE", // required
 * //           Value: "STRING_VALUE", // required
 * //         },
 * //       ],
 * //       MatchObjectAge: { // MatchObjectAge
 * //         DaysGreaterThan: Number("int"),
 * //         DaysLessThan: Number("int"),
 * //       },
 * //       MatchObjectSize: { // MatchObjectSize
 * //         BytesGreaterThan: Number("long"),
 * //         BytesLessThan: Number("long"),
 * //       },
 * //       And: { // StorageLensGroupAndOperator
 * //         MatchAnyPrefix: [
 * //           "STRING_VALUE",
 * //         ],
 * //         MatchAnySuffix: [
 * //           "STRING_VALUE",
 * //         ],
 * //         MatchAnyTag: [
 * //           {
 * //             Key: "STRING_VALUE", // required
 * //             Value: "STRING_VALUE", // required
 * //           },
 * //         ],
 * //         MatchObjectAge: {
 * //           DaysGreaterThan: Number("int"),
 * //           DaysLessThan: Number("int"),
 * //         },
 * //         MatchObjectSize: {
 * //           BytesGreaterThan: Number("long"),
 * //           BytesLessThan: Number("long"),
 * //         },
 * //       },
 * //       Or: { // StorageLensGroupOrOperator
 * //         MatchAnyPrefix: [
 * //           "STRING_VALUE",
 * //         ],
 * //         MatchAnySuffix: [
 * //           "STRING_VALUE",
 * //         ],
 * //         MatchAnyTag: [
 * //           {
 * //             Key: "STRING_VALUE", // required
 * //             Value: "STRING_VALUE", // required
 * //           },
 * //         ],
 * //         MatchObjectAge: {
 * //           DaysGreaterThan: Number("int"),
 * //           DaysLessThan: Number("int"),
 * //         },
 * //         MatchObjectSize: {
 * //           BytesGreaterThan: Number("long"),
 * //           BytesLessThan: Number("long"),
 * //         },
 * //       },
 * //     },
 * //     StorageLensGroupArn: "STRING_VALUE",
 * //   },
 * // };
 *
 * ```
 *
 * @param GetStorageLensGroupCommandInput - {@link GetStorageLensGroupCommandInput}
 * @returns {@link GetStorageLensGroupCommandOutput}
 * @see {@link GetStorageLensGroupCommandInput} for command's `input` shape.
 * @see {@link GetStorageLensGroupCommandOutput} for command's `response` shape.
 * @see {@link S3ControlClientResolvedConfig | config} for S3ControlClient's `config` shape.
 *
 * @throws {@link S3ControlServiceException}
 * <p>Base exception class for all service exceptions from S3Control service.</p>
 *
 */
export declare class GetStorageLensGroupCommand extends $Command<GetStorageLensGroupCommandInput, GetStorageLensGroupCommandOutput, S3ControlClientResolvedConfig> {
    readonly input: GetStorageLensGroupCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: GetStorageLensGroupCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: S3ControlClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStorageLensGroupCommandInput, GetStorageLensGroupCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
