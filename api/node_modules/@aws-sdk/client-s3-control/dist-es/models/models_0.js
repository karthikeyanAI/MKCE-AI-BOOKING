import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { S3ControlServiceException as __BaseException } from "./S3ControlServiceException";
export const OwnerOverride = {
    Destination: "Destination",
};
export const GranteeType = {
    DIRECTORY_GROUP: "DIRECTORY_GROUP",
    DIRECTORY_USER: "DIRECTORY_USER",
    IAM: "IAM",
};
export const Permission = {
    READ: "READ",
    READWRITE: "READWRITE",
    WRITE: "WRITE",
};
export const NetworkOrigin = {
    Internet: "Internet",
    VPC: "VPC",
};
export const AsyncOperationName = {
    CreateMultiRegionAccessPoint: "CreateMultiRegionAccessPoint",
    DeleteMultiRegionAccessPoint: "DeleteMultiRegionAccessPoint",
    PutMultiRegionAccessPointPolicy: "PutMultiRegionAccessPointPolicy",
};
export const S3PrefixType = {
    Object: "Object",
};
export const ObjectLambdaAllowedFeature = {
    GetObjectPartNumber: "GetObject-PartNumber",
    GetObjectRange: "GetObject-Range",
    HeadObjectPartNumber: "HeadObject-PartNumber",
    HeadObjectRange: "HeadObject-Range",
};
export const ObjectLambdaTransformationConfigurationAction = {
    GetObject: "GetObject",
    HeadObject: "HeadObject",
    ListObjects: "ListObjects",
    ListObjectsV2: "ListObjectsV2",
};
export var ObjectLambdaContentTransformation;
(function (ObjectLambdaContentTransformation) {
    ObjectLambdaContentTransformation.visit = (value, visitor) => {
        if (value.AwsLambda !== undefined)
            return visitor.AwsLambda(value.AwsLambda);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ObjectLambdaContentTransformation || (ObjectLambdaContentTransformation = {}));
export const ObjectLambdaAccessPointAliasStatus = {
    PROVISIONING: "PROVISIONING",
    READY: "READY",
};
export class BucketAlreadyExists extends __BaseException {
    constructor(opts) {
        super({
            name: "BucketAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyExists.prototype);
    }
}
export class BucketAlreadyOwnedByYou extends __BaseException {
    constructor(opts) {
        super({
            name: "BucketAlreadyOwnedByYou",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);
    }
}
export const BucketCannedACL = {
    authenticated_read: "authenticated-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write",
};
export const BucketLocationConstraint = {
    EU: "EU",
    ap_northeast_1: "ap-northeast-1",
    ap_south_1: "ap-south-1",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    cn_north_1: "cn-north-1",
    eu_central_1: "eu-central-1",
    eu_west_1: "eu-west-1",
    sa_east_1: "sa-east-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export const JobManifestFieldName = {
    Bucket: "Bucket",
    Ignore: "Ignore",
    Key: "Key",
    VersionId: "VersionId",
};
export const JobManifestFormat = {
    S3BatchOperations_CSV_20180820: "S3BatchOperations_CSV_20180820",
    S3InventoryReport_CSV_20161130: "S3InventoryReport_CSV_20161130",
};
export const S3StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA",
};
export const ReplicationStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    NONE: "NONE",
    REPLICA: "REPLICA",
};
export const GeneratedManifestFormat = {
    S3InventoryReport_CSV_20211130: "S3InventoryReport_CSV_20211130",
};
export var JobManifestGenerator;
(function (JobManifestGenerator) {
    JobManifestGenerator.visit = (value, visitor) => {
        if (value.S3JobManifestGenerator !== undefined)
            return visitor.S3JobManifestGenerator(value.S3JobManifestGenerator);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(JobManifestGenerator || (JobManifestGenerator = {}));
export const S3GlacierJobTier = {
    BULK: "BULK",
    STANDARD: "STANDARD",
};
export const S3GranteeTypeIdentifier = {
    CANONICAL: "id",
    EMAIL_ADDRESS: "emailAddress",
    GROUP: "uri",
};
export const S3Permission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP",
};
export const S3CannedAccessControlList = {
    AUTHENTICATED_READ: "authenticated-read",
    AWS_EXEC_READ: "aws-exec-read",
    BUCKET_OWNER_FULL_CONTROL: "bucket-owner-full-control",
    BUCKET_OWNER_READ: "bucket-owner-read",
    PRIVATE: "private",
    PUBLIC_READ: "public-read",
    PUBLIC_READ_WRITE: "public-read-write",
};
export const S3ChecksumAlgorithm = {
    CRC32: "CRC32",
    CRC32C: "CRC32C",
    SHA1: "SHA1",
    SHA256: "SHA256",
};
export const S3MetadataDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE",
};
export const S3SSEAlgorithm = {
    AES256: "AES256",
    KMS: "KMS",
};
export const S3ObjectLockLegalHoldStatus = {
    OFF: "OFF",
    ON: "ON",
};
export const S3ObjectLockMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE",
};
export const S3ObjectLockRetentionMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE",
};
export const JobReportFormat = {
    Report_CSV_20180820: "Report_CSV_20180820",
};
export const JobReportScope = {
    AllTasks: "AllTasks",
    FailedTasksOnly: "FailedTasksOnly",
};
export class IdempotencyException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotencyException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotencyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotencyException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const JobStatus = {
    Active: "Active",
    Cancelled: "Cancelled",
    Cancelling: "Cancelling",
    Complete: "Complete",
    Completing: "Completing",
    Failed: "Failed",
    Failing: "Failing",
    New: "New",
    Paused: "Paused",
    Pausing: "Pausing",
    Preparing: "Preparing",
    Ready: "Ready",
    Suspended: "Suspended",
};
export const TransitionStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD_IA: "STANDARD_IA",
};
export const ExpirationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const DeleteMarkerReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const MetricsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const ReplicationTimeStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const ReplicationStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA",
};
export const ExistingObjectReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const ReplicaModificationsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const SseKmsEncryptedObjectsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const ReplicationRuleStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const MFADeleteStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const BucketVersioningStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended",
};
export const Privilege = {
    Default: "Default",
    Minimal: "Minimal",
};
export const MultiRegionAccessPointStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    INCONSISTENT_ACROSS_REGIONS: "INCONSISTENT_ACROSS_REGIONS",
    PARTIALLY_CREATED: "PARTIALLY_CREATED",
    PARTIALLY_DELETED: "PARTIALLY_DELETED",
    READY: "READY",
};
export class NoSuchPublicAccessBlockConfiguration extends __BaseException {
    constructor(opts) {
        super({
            name: "NoSuchPublicAccessBlockConfiguration",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchPublicAccessBlockConfiguration";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchPublicAccessBlockConfiguration.prototype);
        this.Message = opts.Message;
    }
}
export const Format = {
    CSV: "CSV",
    Parquet: "Parquet",
};
export const OutputSchemaVersion = {
    V_1: "V_1",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export const OperationName = {
    LambdaInvoke: "LambdaInvoke",
    S3DeleteObjectTagging: "S3DeleteObjectTagging",
    S3InitiateRestoreObject: "S3InitiateRestoreObject",
    S3PutObjectAcl: "S3PutObjectAcl",
    S3PutObjectCopy: "S3PutObjectCopy",
    S3PutObjectLegalHold: "S3PutObjectLegalHold",
    S3PutObjectRetention: "S3PutObjectRetention",
    S3PutObjectTagging: "S3PutObjectTagging",
    S3ReplicateObject: "S3ReplicateObject",
};
export const CredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessKeyId && { AccessKeyId: SENSITIVE_STRING }),
    ...(obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING }),
    ...(obj.SessionToken && { SessionToken: SENSITIVE_STRING }),
});
export const GetDataAccessResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Credentials && { Credentials: SENSITIVE_STRING }),
});
