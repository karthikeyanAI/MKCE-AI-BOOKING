"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketVersioningStatus = exports.MFADeleteStatus = exports.ReplicationRuleStatus = exports.SseKmsEncryptedObjectsStatus = exports.ReplicaModificationsStatus = exports.ExistingObjectReplicationStatus = exports.ReplicationStorageClass = exports.ReplicationTimeStatus = exports.MetricsStatus = exports.DeleteMarkerReplicationStatus = exports.ExpirationStatus = exports.TransitionStorageClass = exports.JobStatus = exports.NotFoundException = exports.TooManyRequestsException = exports.InternalServiceException = exports.IdempotencyException = exports.JobReportScope = exports.JobReportFormat = exports.S3ObjectLockRetentionMode = exports.S3ObjectLockMode = exports.S3ObjectLockLegalHoldStatus = exports.S3SSEAlgorithm = exports.S3MetadataDirective = exports.S3ChecksumAlgorithm = exports.S3CannedAccessControlList = exports.S3Permission = exports.S3GranteeTypeIdentifier = exports.S3GlacierJobTier = exports.JobManifestGenerator = exports.GeneratedManifestFormat = exports.ReplicationStatus = exports.S3StorageClass = exports.JobManifestFormat = exports.JobManifestFieldName = exports.BadRequestException = exports.BucketLocationConstraint = exports.BucketCannedACL = exports.BucketAlreadyOwnedByYou = exports.BucketAlreadyExists = exports.ObjectLambdaAccessPointAliasStatus = exports.ObjectLambdaContentTransformation = exports.ObjectLambdaTransformationConfigurationAction = exports.ObjectLambdaAllowedFeature = exports.S3PrefixType = exports.AsyncOperationName = exports.NetworkOrigin = exports.Permission = exports.GranteeType = exports.OwnerOverride = void 0;
exports.GetDataAccessResultFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.OperationName = exports.InvalidRequestException = exports.InvalidNextTokenException = exports.OutputSchemaVersion = exports.Format = exports.NoSuchPublicAccessBlockConfiguration = exports.MultiRegionAccessPointStatus = exports.Privilege = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const S3ControlServiceException_1 = require("./S3ControlServiceException");
exports.OwnerOverride = {
    Destination: "Destination",
};
exports.GranteeType = {
    DIRECTORY_GROUP: "DIRECTORY_GROUP",
    DIRECTORY_USER: "DIRECTORY_USER",
    IAM: "IAM",
};
exports.Permission = {
    READ: "READ",
    READWRITE: "READWRITE",
    WRITE: "WRITE",
};
exports.NetworkOrigin = {
    Internet: "Internet",
    VPC: "VPC",
};
exports.AsyncOperationName = {
    CreateMultiRegionAccessPoint: "CreateMultiRegionAccessPoint",
    DeleteMultiRegionAccessPoint: "DeleteMultiRegionAccessPoint",
    PutMultiRegionAccessPointPolicy: "PutMultiRegionAccessPointPolicy",
};
exports.S3PrefixType = {
    Object: "Object",
};
exports.ObjectLambdaAllowedFeature = {
    GetObjectPartNumber: "GetObject-PartNumber",
    GetObjectRange: "GetObject-Range",
    HeadObjectPartNumber: "HeadObject-PartNumber",
    HeadObjectRange: "HeadObject-Range",
};
exports.ObjectLambdaTransformationConfigurationAction = {
    GetObject: "GetObject",
    HeadObject: "HeadObject",
    ListObjects: "ListObjects",
    ListObjectsV2: "ListObjectsV2",
};
var ObjectLambdaContentTransformation;
(function (ObjectLambdaContentTransformation) {
    ObjectLambdaContentTransformation.visit = (value, visitor) => {
        if (value.AwsLambda !== undefined)
            return visitor.AwsLambda(value.AwsLambda);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ObjectLambdaContentTransformation = exports.ObjectLambdaContentTransformation || (exports.ObjectLambdaContentTransformation = {}));
exports.ObjectLambdaAccessPointAliasStatus = {
    PROVISIONING: "PROVISIONING",
    READY: "READY",
};
class BucketAlreadyExists extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "BucketAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyExists.prototype);
    }
}
exports.BucketAlreadyExists = BucketAlreadyExists;
class BucketAlreadyOwnedByYou extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "BucketAlreadyOwnedByYou",
            $fault: "client",
            ...opts,
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);
    }
}
exports.BucketAlreadyOwnedByYou = BucketAlreadyOwnedByYou;
exports.BucketCannedACL = {
    authenticated_read: "authenticated-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write",
};
exports.BucketLocationConstraint = {
    EU: "EU",
    ap_northeast_1: "ap-northeast-1",
    ap_south_1: "ap-south-1",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    cn_north_1: "cn-north-1",
    eu_central_1: "eu-central-1",
    eu_west_1: "eu-west-1",
    sa_east_1: "sa-east-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
class BadRequestException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.BadRequestException = BadRequestException;
exports.JobManifestFieldName = {
    Bucket: "Bucket",
    Ignore: "Ignore",
    Key: "Key",
    VersionId: "VersionId",
};
exports.JobManifestFormat = {
    S3BatchOperations_CSV_20180820: "S3BatchOperations_CSV_20180820",
    S3InventoryReport_CSV_20161130: "S3InventoryReport_CSV_20161130",
};
exports.S3StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA",
};
exports.ReplicationStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    NONE: "NONE",
    REPLICA: "REPLICA",
};
exports.GeneratedManifestFormat = {
    S3InventoryReport_CSV_20211130: "S3InventoryReport_CSV_20211130",
};
var JobManifestGenerator;
(function (JobManifestGenerator) {
    JobManifestGenerator.visit = (value, visitor) => {
        if (value.S3JobManifestGenerator !== undefined)
            return visitor.S3JobManifestGenerator(value.S3JobManifestGenerator);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(JobManifestGenerator = exports.JobManifestGenerator || (exports.JobManifestGenerator = {}));
exports.S3GlacierJobTier = {
    BULK: "BULK",
    STANDARD: "STANDARD",
};
exports.S3GranteeTypeIdentifier = {
    CANONICAL: "id",
    EMAIL_ADDRESS: "emailAddress",
    GROUP: "uri",
};
exports.S3Permission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP",
};
exports.S3CannedAccessControlList = {
    AUTHENTICATED_READ: "authenticated-read",
    AWS_EXEC_READ: "aws-exec-read",
    BUCKET_OWNER_FULL_CONTROL: "bucket-owner-full-control",
    BUCKET_OWNER_READ: "bucket-owner-read",
    PRIVATE: "private",
    PUBLIC_READ: "public-read",
    PUBLIC_READ_WRITE: "public-read-write",
};
exports.S3ChecksumAlgorithm = {
    CRC32: "CRC32",
    CRC32C: "CRC32C",
    SHA1: "SHA1",
    SHA256: "SHA256",
};
exports.S3MetadataDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE",
};
exports.S3SSEAlgorithm = {
    AES256: "AES256",
    KMS: "KMS",
};
exports.S3ObjectLockLegalHoldStatus = {
    OFF: "OFF",
    ON: "ON",
};
exports.S3ObjectLockMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE",
};
exports.S3ObjectLockRetentionMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE",
};
exports.JobReportFormat = {
    Report_CSV_20180820: "Report_CSV_20180820",
};
exports.JobReportScope = {
    AllTasks: "AllTasks",
    FailedTasksOnly: "FailedTasksOnly",
};
class IdempotencyException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "IdempotencyException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotencyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotencyException.prototype);
        this.Message = opts.Message;
    }
}
exports.IdempotencyException = IdempotencyException;
class InternalServiceException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServiceException = InternalServiceException;
class TooManyRequestsException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
class NotFoundException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.NotFoundException = NotFoundException;
exports.JobStatus = {
    Active: "Active",
    Cancelled: "Cancelled",
    Cancelling: "Cancelling",
    Complete: "Complete",
    Completing: "Completing",
    Failed: "Failed",
    Failing: "Failing",
    New: "New",
    Paused: "Paused",
    Pausing: "Pausing",
    Preparing: "Preparing",
    Ready: "Ready",
    Suspended: "Suspended",
};
exports.TransitionStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD_IA: "STANDARD_IA",
};
exports.ExpirationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.DeleteMarkerReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.MetricsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ReplicationTimeStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ReplicationStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA",
};
exports.ExistingObjectReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ReplicaModificationsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.SseKmsEncryptedObjectsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.ReplicationRuleStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.MFADeleteStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
exports.BucketVersioningStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended",
};
exports.Privilege = {
    Default: "Default",
    Minimal: "Minimal",
};
exports.MultiRegionAccessPointStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    INCONSISTENT_ACROSS_REGIONS: "INCONSISTENT_ACROSS_REGIONS",
    PARTIALLY_CREATED: "PARTIALLY_CREATED",
    PARTIALLY_DELETED: "PARTIALLY_DELETED",
    READY: "READY",
};
class NoSuchPublicAccessBlockConfiguration extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "NoSuchPublicAccessBlockConfiguration",
            $fault: "client",
            ...opts,
        });
        this.name = "NoSuchPublicAccessBlockConfiguration";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchPublicAccessBlockConfiguration.prototype);
        this.Message = opts.Message;
    }
}
exports.NoSuchPublicAccessBlockConfiguration = NoSuchPublicAccessBlockConfiguration;
exports.Format = {
    CSV: "CSV",
    Parquet: "Parquet",
};
exports.OutputSchemaVersion = {
    V_1: "V_1",
};
class InvalidNextTokenException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
class InvalidRequestException extends S3ControlServiceException_1.S3ControlServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidRequestException = InvalidRequestException;
exports.OperationName = {
    LambdaInvoke: "LambdaInvoke",
    S3DeleteObjectTagging: "S3DeleteObjectTagging",
    S3InitiateRestoreObject: "S3InitiateRestoreObject",
    S3PutObjectAcl: "S3PutObjectAcl",
    S3PutObjectCopy: "S3PutObjectCopy",
    S3PutObjectLegalHold: "S3PutObjectLegalHold",
    S3PutObjectRetention: "S3PutObjectRetention",
    S3PutObjectTagging: "S3PutObjectTagging",
    S3ReplicateObject: "S3ReplicateObject",
};
const CredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessKeyId && { AccessKeyId: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SessionToken && { SessionToken: smithy_client_1.SENSITIVE_STRING }),
});
exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
const GetDataAccessResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Credentials && { Credentials: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetDataAccessResultFilterSensitiveLog = GetDataAccessResultFilterSensitiveLog;
